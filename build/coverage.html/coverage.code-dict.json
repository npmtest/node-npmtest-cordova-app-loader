{"/home/travis/build/npmtest/node-npmtest-cordova-app-loader/test.js":"/* istanbul instrument in package npmtest_cordova_app_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/lib.npmtest_cordova_app_loader.js":"/* istanbul instrument in package npmtest_cordova_app_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_app_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_app_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-app-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_app_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_app_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_app_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_cordova_app_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_app_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_cordova_app_loader.__dirname +\n                    '/lib.npmtest_cordova_app_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/node_modules/cordova-app-loader/index.js":"var CordovaFileCache = require('cordova-file-cache');\nvar CordovaPromiseFS = require('cordova-promise-fs');\nvar Promise = null;\n\nvar BUNDLE_ROOT = location.href.replace(location.hash,'');\nBUNDLE_ROOT = BUNDLE_ROOT.substr(0,BUNDLE_ROOT.lastIndexOf('/')+1);\nif(/ip(hone|ad|od)/i.test(navigator.userAgent)){\n  BUNDLE_ROOT = location.pathname.substr(location.pathname.indexOf('/www/'));\n  BUNDLE_ROOT = BUNDLE_ROOT.substr(0,BUNDLE_ROOT.lastIndexOf('/')+1);\n  BUNDLE_ROOT = 'cdvfile://localhost/bundle' + BUNDLE_ROOT;\n}\n\nfunction hash(files){\n  var keys = Object.keys(files);\n  keys.sort();\n  var str = '';\n  keys.forEach(function(key){\n    if(files[key] && files[key].version);\n      str += '@' + files[key].version;\n  });\n  return CordovaFileCache.hash(str) + '';\n}\n\nfunction AppLoader(options){\n  if(!options) throw new Error('CordovaAppLoader has no options!');\n  if(!options.fs) throw new Error('CordovaAppLoader has no \"fs\" option (cordova-promise-fs)');\n  if(!options.serverRoot) throw new Error('CordovaAppLoader has no \"serverRoot\" option.');\n  if(!window.pegasus || !window.Manifest) throw new Error('CordovaAppLoader bootstrap.js is missing.');\n  this.allowServerRootFromManifest = options.allowServerRootFromManifest === true;\n  Promise = options.fs.Promise;\n\n  // initialize variables\n  this.manifest = window.Manifest;\n  this.newManifest = null;\n  this.bundledManifest = null;\n  this.preventAutoUpdateLoop = options.preventAutoUpdateLoop === true;\n  this._lastUpdateFiles = localStorage.getItem('last_update_files');\n\n  // normalize serverRoot and set remote manifest url\n  options.serverRoot = options.serverRoot || '';\n  if(!!options.serverRoot && options.serverRoot[options.serverRoot.length-1] !== '/') options.serverRoot += '/';\n  this.newManifestUrl = options.manifestUrl || options.serverRoot + (options.manifest || 'manifest.json');\n\n  // initialize a file cache\n  if(options.mode) options.mode = 'mirror';\n  this.cache = new CordovaFileCache(options);\n\n  // private stuff\n  this.corruptNewManifest = false;\n  this._toBeCopied = [];\n  this._toBeDeleted = [];\n  this._toBeDownloaded = [];\n  this._updateReady = false;\n  this._checkTimeout = options.checkTimeout || 10000;\n}\n\nAppLoader.prototype._createFilemap = function(files){\n  var result = {};\n  var normalize = this.cache._fs.normalize;\n  Object.keys(files).forEach(function(key){\n    files[key].filename = normalize(files[key].filename);\n    result[files[key].filename] = files[key];\n  });\n  return result;\n};\n\nAppLoader.prototype.copyFromBundle = function(file){\n  var url = BUNDLE_ROOT + file;\n  return this.cache._fs.download(url,this.cache.localRoot + file);\n};\n\nAppLoader.prototype.getBundledManifest = function(){\n  var self = this;\n  var bootstrapScript = document.querySelector('script[manifest]');\n  var bundledManifestUrl = (bootstrapScript? bootstrapScript.getAttribute('manifest'): null) || 'manifest.json';\n\n  return new Promise(function(resolve,reject){\n    if(self.bundledManifest) {\n      resolve(self.bundledManifest);\n    } else {\n      pegasus(bundledManifestUrl).then(function(bundledManifest){\n        self.bundledManifest = bundledManifest;\n        resolve(bundledManifest);\n      },reject);\n      setTimeout(function(){reject(new Error('bundled manifest timeout'));},self._checkTimeout);\n    }\n  });\n};\n\n\nAppLoader.prototype.check = function(newManifest){\n  var self = this, manifest = this.manifest;\n  if(typeof newManifest === \"string\") {\n    self.newManifestUrl = newManifest;\n    newManifest = undefined;\n  }\n\n  var gotNewManifest = new Promise(function(resolve,reject){\n    if(typeof newManifest === \"object\") {\n      resolve(newManifest);\n    } else {\n      pegasus(self.newManifestUrl).then(resolve,reject);\n      setTimeout(function(){reject(new Error('new manifest timeout'));},self._checkTimeout);\n    }\n  });\n\n  return new Promise(function(resolve,reject){\n    Promise.all([gotNewManifest,self.getBundledManifest(),self.cache.list()])\n      .then(function(values){\n        var newManifest = values[0];\n        var bundledManifest = values[1];\n        var newFiles = hash(newManifest.files);\n\n        // Prevent end-less update loop, check if new manifest\n        // has been downloaded before (but failes)\n        \n        // Check if the newFiles match the previous files (last_update_files)\n        if(self.preventAutoUpdateLoop === true && newFiles === self._lastUpdateFiles) {\n          // YES! So we're doing the same update again!\n\n          // Check if our current Manifest has indeed the \"last_update_files\"\n          var currentFiles = hash(Manifest.files);\n          if(self._lastUpdateFiles !== currentFiles){\n            // No! So we've updated, yet they don't appear in our manifest. This means:\n            console.warn('New manifest available, but an earlier update attempt failed. Will not download.');\n            self.corruptNewManifest = true;\n            resolve(null);\n          }\n          // Yes, we've updated and we've succeeded.\n          resolve(false);\n          return;\n        }\n\n        // Check if new manifest is valid\n        if(!newManifest.files){\n          reject(new Error('Downloaded Manifest has no \"files\" attribute.'));\n          return;\n        }\n\n        // We're good to go check! Get all the files we need\n        var cachedFiles = values[2]; // files in cache\n        var oldFiles = self._createFilemap(manifest.files); // files in current manifest\n        var newFiles = self._createFilemap(newManifest.files); // files in new manifest\n        var bundledFiles = self._createFilemap(bundledManifest.files); // files in app bundle\n\n        // Create COPY and DOWNLOAD lists\n        self._toBeDownloaded = [];\n        self._toBeCopied = [];\n        self._toBeDeleted= [];\n        var isCordova = self.cache._fs.isCordova;\n        var changes = 0;\n        Object.keys(newFiles)\n          // Find files that have changed version or are missing\n          .filter(function(file){\n                    // if new file, or...\n            return !oldFiles[file] ||\n                    // version has changed, or...\n                    oldFiles[file].version !== newFiles[file].version //||\n                    // not in cache for some reason\n                    !self.cache.isCached(file);\n          })\n          // Add them to the correct list\n          .forEach(function(file){\n            // bundled version matches new version, so we can copy!\n            if(isCordova && bundledFiles[file] && bundledFiles[file].version === newFiles[file].version){\n              self._toBeCopied.push(file);\n            // othwerwise, we must download\n            } else {\n              self._toBeDownloaded.push(file);\n            }\n            if(!bundledFiles[file] || bundledFiles[file].version !== newFiles[file].version){\n              changes++;\n            }\n          });\n\n        // Delete files\n        self._toBeDeleted = cachedFiles\n          .map(function(file){\n            return file.substr(self.cache.localRoot.length);\n          })\n          .filter(function(file){\n                  // Everything that is not in new manifest, or....\n            return !newFiles[file] ||\n                  // Files that will be downloaded, or...\n                   self._toBeDownloaded.indexOf(file) >= 0 ||\n                  // Files that will be copied\n                   self._toBeCopied.indexOf(file) >= 0;\n          });\n\n\n        changes += self._toBeDeleted.length;\n        // Note: if we only need to copy files, we can keep serving from bundle!\n        // So no update is needed!\n        if(changes > 0){\n          // Save the new Manifest\n          self.newManifest = newManifest;\n          self.newManifest.root = self.cache.localUrl;\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n      }, function(err){\n        reject(err);\n      }); // end of .then\n  }); // end of new Promise\n};\n\nAppLoader.prototype.canDownload = function(){\n  return !!this.newManifest && !this._updateReady;\n};\n\nAppLoader.prototype.canUpdate = function(){\n  return this._updateReady;\n};\n\nAppLoader.prototype.download = function(onprogress,includeFileProgressEvents){\n  var self = this;\n  if(!self.canDownload()) {\n    return new Promise(function(resolve){ resolve(null); });\n  }\n  // we will delete files, which will invalidate the current manifest...\n  localStorage.removeItem('manifest');\n  // only attempt this once - set 'last_update_files'\n  localStorage.setItem('last_update_files',hash(this.newManifest.files));\n  this.manifest.files = Manifest.files = {};\n  return self.cache.remove(self._toBeDeleted,true)\n    .then(function(){\n      return Promise.all(self._toBeCopied.map(function(file){\n        return self.cache._fs.download(BUNDLE_ROOT + file,self.cache.localRoot + file);\n      }));\n    })\n    .then(function(){\n      if(self.allowServerRootFromManifest && self.newManifest.serverRoot){\n        self.cache.serverRoot = self.newManifest.serverRoot;\n      }\n      self.cache.add(self._toBeDownloaded);\n      return self.cache.download(onprogress,includeFileProgressEvents);\n    }).then(function(){\n      self._toBeDeleted = [];\n      self._toBeDownloaded = [];\n      self._updateReady = true;\n      return self.newManifest;\n    },function(files){\n      // on download error, remove files...\n      if(!!files && files.length){\n        self.cache.remove(files);\n      }\n      return files;\n    });\n};\n\nAppLoader.prototype.update = function(reload){\n  if(this._updateReady) {\n    // update manifest\n    localStorage.setItem('manifest',JSON.stringify(this.newManifest));\n    if(reload !== false) location.reload();\n    return true;\n  }\n  return false;\n};\n\nAppLoader.prototype.clear = function(){\n  localStorage.removeItem('last_update_files');\n  localStorage.removeItem('manifest');\n  return this.cache.clear();\n};\n\nAppLoader.prototype.reset = function(){\n  return this.clear().then(function(){\n    location.reload();\n  },function(){\n    location.reload();\n  });\n};\n\nmodule.exports = AppLoader;","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/node_modules/cordova-app-loader/autoupdate.js":"(function(){\n  // Check for Cordova\n  var isCordova = typeof cordova !== 'undefined',\n  // CordovaPromiseFS\n      fs,\n  // CordovaFileLoader\n      loader,\n  // script-tag...\n      script,\n  // ...that contains the serverRoot\n      serverRoot;\n\n  // Get serverRoot from script tag.\n  script = document.querySelector('script[server]');\n  if(script) serverRoot= script.getAttribute('server');\n  if(!serverRoot) {\n    throw new Error('Add a \"server\" attribute to the bootstrap.js script!');\n  }\n\n  // Initialize filesystem and loader\n  fs = new CordovaPromiseFS({\n    persistent: isCordova, // Chrome should use temporary storage.\n    Promise: Promise\n  });\n\n  loader = new CordovaAppLoader({\n    fs: fs,\n    localRoot: 'app',\n    serverRoot: serverRoot,\n    mode: 'mirror',\n    cacheBuster: true\n  });\n\n  // Check > Download > Update\n  function check(){\n    loader.check()\n    .then(function(){\n      return loader.download();\n    })\n    .then(function(){\n      return loader.update();\n    },function(err){\n      console.error('Auto-update error:',err);\n    });\n  }\n\n  // Couple events:\n\n  // 1. On launch\n  check();\n\n  // 2. Cordova: On resume\n  fs.deviceready.then(function(){\n    document.addEventListener('resume',check);\n  });\n\n  // 3. Chrome: On page becomes visible again\n  function handleVisibilityChange() {\n    if (!document.webkitHidden) {\n      check();\n    }\n  }\n  document.addEventListener(\"webkitvisibilitychange\", handleVisibilityChange, false);\n})();","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/node_modules/cordova-app-loader/bootstrap.js":"(function(){\n// Retrieved and slightly modified from: https://github.com/typicode/pegasus\n// --------------------------------------------------------------------------\n//\n// a   url (naming it a, beacause it will be reused to store callbacks)\n// xhr placeholder to avoid using var, not to be used\nwindow.pegasus = function pegasus(a, xhr) {\n  xhr = new XMLHttpRequest();\n\n  // Open url\n  xhr.open('GET', a);\n\n  // Reuse a to store callbacks\n  a = [];\n\n  // onSuccess handler\n  // onError   handler\n  // cb        placeholder to avoid using var, should not be used\n  xhr.onreadystatechange = xhr.then = function(onSuccess, onError, cb, result) {\n\n    // Test if onSuccess is a function or a load event\n    if (onSuccess.call) a = [onSuccess, onError];\n\n    // Test if request is complete\n    if (xhr.readyState == 4) {\n\n      try {\n        if(xhr.status === 200 || xhr.status === 0){\n          result = JSON.parse(xhr.responseText);\n          cb = a[0];\n        } else {\n          result = new Error('Status: '+xhr.status);\n          cb = a[1];\n        }\n      } catch(e) {\n        result = e;\n        cb = a[1];\n      }\n\n      // Safari doesn't support xhr.responseType = 'json'\n      // so the response is parsed\n      if (cb) cb(result);\n    }\n  };\n\n  // Send\n  xhr.send();\n\n  // Return request\n  return xhr;\n};\n//------------------------------------------------------------------\n// Step 2: After fetching manifest (localStorage or XHR), load it\nfunction loadManifest(manifest,fromLocalStorage,timeout){\n  // Safety timeout. If BOOTSTRAP_OK is not defined,\n  // it will delete the 'localStorage' version and revert to factory settings.\n  if(fromLocalStorage){\n    setTimeout(function(){\n      if(!window.BOOTSTRAP_OK){\n        console.warn('BOOTSTRAP_OK !== true; Resetting to original manifest.json...');\n        localStorage.removeItem('manifest');\n        location.reload();\n      }\n    },timeout);\n  }\n\n  if(!manifest.load) {\n    console.error('Manifest has nothing to load (manifest.load is empty).',manifest);\n    return;\n  }\n\n  var el,\n      head = document.getElementsByTagName('head')[0],\n      scripts = manifest.load.concat(),\n      now = Date.now();\n\n  // Load Scripts\n  function loadScripts(){\n    scripts.forEach(function(src) {\n      if(!src) return;\n      // Ensure the 'src' has no '/' (it's in the root already)\n      if(src[0] === '/') src = src.substr(1);\n      src = manifest.root + src ;\n      // Load javascript\n      if(src.substr(-3) === \".js\"){\n        el= document.createElement('script');\n        el.charset=\"UTF-8\";\n        el.type= 'text/javascript';\n        el.src= src + '?' + now;\n        el.async = false;\n      // Load CSS\n      } else {\n        el= document.createElement('link');\n        el.rel = \"stylesheet\";\n        el.href = src + '?' + now;\n        el.type = \"text/css\";\n      }\n      head.appendChild(el);\n    });\n  }\n\n  //---------------------------------------------------\n  // Step 3: Ensure the 'root' end with a '/'\n  manifest.root = manifest.root || './';\n  if(manifest.root.length > 0 && manifest.root[manifest.root.length-1] !== '/')\n    manifest.root += '/';\n\n  // Step 4: Save manifest for next time\n  if(!fromLocalStorage) \n    localStorage.setItem('manifest',JSON.stringify(manifest));\n\n  // Step 5: Load Scripts\n  // If we're loading Cordova files, make sure Cordova is ready first!\n  if(typeof window.cordova !== 'undefined'){\n    document.addEventListener(\"deviceready\", loadScripts, false);\n  } else {\n    loadScripts();\n  }\n  // Save to global scope\n  window.Manifest = manifest;\n}\n//---------------------------------------------------------------------\nwindow.Manifest = {};\n// Step 1: Load manifest from localStorage\nvar manifest = JSON.parse(localStorage.getItem('manifest'));\n// grab manifest.json location from <script manifest=\"...\"></script>\nvar s = document.querySelector('script[manifest]');\n// Not in localStorage? Fetch it!\nif(!manifest){\n  var url = (s? s.getAttribute('manifest'): null) || 'manifest.json';\n  // get manifest.json, then loadManifest.\n  pegasus(url).then(loadManifest,function(xhr){\n    console.error('Could not download '+url+': '+xhr.status);\n  });\n// Manifest was in localStorage. Load it immediatly.\n} else {\n  loadManifest(manifest,true,s.getAttribute('timeout') || 10000);\n}\n})();","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/node_modules/cordova-app-loader/bundle.js":"window.CordovaAppLoader = require('./index');\nwindow.CordovaFileCache = require('cordova-file-cache');\nwindow.CordovaPromiseFS = require('cordova-promise-fs');\nwindow.Promise = require('promiscuous');\nwindow.setImmediate = window.setTimeout; // for promiscuous to work!","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/node_modules/cordova-app-loader/pegasus.js":"// Retrieved and slightly modified from: https://github.com/typicode/pegasus\n// --------------------------------------------------------------------------\n//\n// a   url (naming it a, beacause it will be reused to store callbacks)\n// xhr placeholder to avoid using var, not to be used\nfunction pegasus(a, xhr) {\n  xhr = new XMLHttpRequest();\n\n  // Open url\n  xhr.open('GET', a);\n\n  // Reuse a to store callbacks\n  a = [];\n\n  // onSuccess handler\n  // onError   handler\n  // cb        placeholder to avoid using var, should not be used\n  xhr.onreadystatechange = xhr.then = function(onSuccess, onError, cb) {\n\n    // Test if onSuccess is a function or a load event\n    if (onSuccess.call) a = [,onSuccess, onError];\n\n    // Test if request is complete\n    if (xhr.readyState == 4) {\n\n      // index will be:\n      // 0 if undefined\n      // 1 if status is between 200 and 399\n      // 2 if status is over\n      cb = a[0|xhr.status / 200];\n\n      // Safari doesn't support xhr.responseType = 'json'\n      // so the response is parsed\n      if (cb) cb(xhr.status === 200?JSON.parse(xhr.responseText):xhr);\n    }\n  };\n\n  // Send\n  xhr.send();\n\n  // Return request\n  return xhr;\n}\nmodule.exports = pegasus;","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/node_modules/cordova-app-loader/www/app.js":"\nvar fs = new CordovaPromiseFS({ persistent: typeof cordova !== 'undefined' });\nvar SERVER = 'http://data.madebymark.nl/cordova-app-loader/';\nif(location.host === 'localhost:8080'){\n  SERVER = 'http://localhost:8080/';\n}\n\nvar loader = window.loader = new CordovaAppLoader({\n  fs: fs,\n  localRoot: 'app',\n  serverRoot: SERVER,\n  mode: 'mirror',\n  cacheBuster: true\n});\n\n\nvar tapEvent = typeof cordova !== 'undefined'?'touchstart':'click';\n\n$.get(Manifest.root + 'template.html', function(template) {\n  $('body').html(template);\n  $('#msg').text('Original');\n  setStatus('ready');\n\n  fs.fs.then(undefined,function(){\n    setStatus('ERROR: Only Chrome and Cordova-iOS/Android are supported!');\n  });\n});\n\nfunction setStatus(msg){\n  $('#status').text(JSON.stringify(msg,null,2));\n}\n\nfunction onProgress(ev){\n  $('.progress-bar').css('width',(ev.percentage * 100) + '%');\n  $('.target').text(ev.path);\n}\n\n$('body').on(tapEvent,'.check',function(ev){\n  var url = $(ev.target).attr('manifest');\n  $('#manifest').val(SERVER+url);\n  return ev.preventDefault();\n});\n\n$('body').on(tapEvent,'.doCheck',function(ev){\n  var url = $('#manifest').val();\n  setStatus('checking...');\n  var cacheBuster = \"?\"+Math.random();\n  loader.check(url+cacheBuster).then(setStatus,setStatus);\n});\n\n$('body').on(tapEvent,'.update',function(){\n  setStatus('updating...');\n  setStatus(loader.update());\n});\n\n$('body').on(tapEvent,'.download',function(){\n  setStatus('downloading...');\n  loader.download(onProgress).then(setStatus,setStatus);\n});\n\n$('body').on(tapEvent,'.factory',function(){\n  setStatus('resetting...');\n  loader.reset().then(setStatus,setStatus);\n});\n\n$('body').on(tapEvent,'.reload',function(){\n  setStatus('reloading...');\n  location.reload();\n});\n\nwindow.ok = function(ok){console.log('ok',ok);};\nwindow.err = function(err){console.log('err',err);};\nwindow.BOOTSTRAP_OK = true;\n","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/node_modules/cordova-app-loader/www/autoupdate.js":"(function(){\n  // Check for Cordova\n  var isCordova = typeof cordova !== 'undefined',\n  // CordovaPromiseFS\n      fs,\n  // CordovaFileLoader\n      loader,\n  // script-tag...\n      script,\n  // ...that contains the serverRoot\n      serverRoot;\n\n  // Get serverRoot from script tag.\n  script = document.querySelector('script[server]');\n  if(script) serverRoot= script.getAttribute('server');\n  if(!serverRoot) {\n    throw new Error('Add a \"server\" attribute to the bootstrap.js script!');\n  }\n\n  // Initialize filesystem and loader\n  fs = new CordovaPromiseFS({\n    persistent: isCordova, // Chrome should use temporary storage.\n    Promise: Promise\n  });\n\n  loader = new CordovaAppLoader({\n    fs: fs,\n    localRoot: 'app',\n    serverRoot: serverRoot,\n    mode: 'mirror',\n    cacheBuster: true\n  });\n\n  // Check > Download > Update\n  function check(){\n    loader.check()\n    .then(function(){\n      return loader.download();\n    })\n    .then(function(){\n      return loader.update();\n    },function(err){\n      console.error('Auto-update error:',err);\n    });\n  }\n\n  // Couple events:\n\n  // 1. On launch\n  check();\n\n  // 2. Cordova: On resume\n  fs.deviceready.then(function(){\n    document.addEventListener('resume',check);\n  });\n\n  // 3. Chrome: On page becomes visible again\n  function handleVisibilityChange() {\n    if (!document.webkitHidden) {\n      check();\n    }\n  }\n  document.addEventListener(\"webkitvisibilitychange\", handleVisibilityChange, false);\n})();","/home/travis/build/npmtest/node-npmtest-cordova-app-loader/node_modules/cordova-app-loader/www/bootstrap.js":"(function(){\n// Retrieved and slightly modified from: https://github.com/typicode/pegasus\n// --------------------------------------------------------------------------\n//\n// a   url (naming it a, beacause it will be reused to store callbacks)\n// xhr placeholder to avoid using var, not to be used\nwindow.pegasus = function pegasus(a, xhr) {\n  xhr = new XMLHttpRequest();\n\n  // Open url\n  xhr.open('GET', a);\n\n  // Reuse a to store callbacks\n  a = [];\n\n  // onSuccess handler\n  // onError   handler\n  // cb        placeholder to avoid using var, should not be used\n  xhr.onreadystatechange = xhr.then = function(onSuccess, onError, cb, result) {\n\n    // Test if onSuccess is a function or a load event\n    if (onSuccess.call) a = [onSuccess, onError];\n\n    // Test if request is complete\n    if (xhr.readyState == 4) {\n\n      try {\n        if(xhr.status === 200 || xhr.status === 0){\n          result = JSON.parse(xhr.responseText);\n          cb = a[0];\n        } else {\n          result = new Error('Status: '+xhr.status);\n          cb = a[1];\n        }\n      } catch(e) {\n        result = e;\n        cb = a[1];\n      }\n\n      // Safari doesn't support xhr.responseType = 'json'\n      // so the response is parsed\n      if (cb) cb(result);\n    }\n  };\n\n  // Send\n  xhr.send();\n\n  // Return request\n  return xhr;\n};\n//------------------------------------------------------------------\n// Step 2: After fetching manifest (localStorage or XHR), load it\nfunction loadManifest(manifest,fromLocalStorage,timeout){\n  // Safety timeout. If BOOTSTRAP_OK is not defined,\n  // it will delete the 'localStorage' version and revert to factory settings.\n  if(fromLocalStorage){\n    setTimeout(function(){\n      if(!window.BOOTSTRAP_OK){\n        console.warn('BOOTSTRAP_OK !== true; Resetting to original manifest.json...');\n        localStorage.removeItem('manifest');\n        location.reload();\n      }\n    },timeout);\n  }\n\n  if(!manifest.load) {\n    console.error('Manifest has nothing to load (manifest.load is empty).',manifest);\n    return;\n  }\n\n  var el,\n      head = document.getElementsByTagName('head')[0],\n      scripts = manifest.load.concat(),\n      now = Date.now();\n\n  // Load Scripts\n  function loadScripts(){\n    scripts.forEach(function(src) {\n      if(!src) return;\n      // Ensure the 'src' has no '/' (it's in the root already)\n      if(src[0] === '/') src = src.substr(1);\n      src = manifest.root + src ;\n      // Load javascript\n      if(src.substr(-3) === \".js\"){\n        el= document.createElement('script');\n        el.charset=\"UTF-8\";\n        el.type= 'text/javascript';\n        el.src= src + '?' + now;\n        el.async = false;\n      // Load CSS\n      } else {\n        el= document.createElement('link');\n        el.rel = \"stylesheet\";\n        el.href = src + '?' + now;\n        el.type = \"text/css\";\n      }\n      head.appendChild(el);\n    });\n  }\n\n  //---------------------------------------------------\n  // Step 3: Ensure the 'root' end with a '/'\n  manifest.root = manifest.root || './';\n  if(manifest.root.length > 0 && manifest.root[manifest.root.length-1] !== '/')\n    manifest.root += '/';\n\n  // Step 4: Save manifest for next time\n  if(!fromLocalStorage) \n    localStorage.setItem('manifest',JSON.stringify(manifest));\n\n  // Step 5: Load Scripts\n  // If we're loading Cordova files, make sure Cordova is ready first!\n  if(typeof window.cordova !== 'undefined'){\n    document.addEventListener(\"deviceready\", loadScripts, false);\n  } else {\n    loadScripts();\n  }\n  // Save to global scope\n  window.Manifest = manifest;\n}\n//---------------------------------------------------------------------\nwindow.Manifest = {};\n// Step 1: Load manifest from localStorage\nvar manifest = JSON.parse(localStorage.getItem('manifest'));\n// grab manifest.json location from <script manifest=\"...\"></script>\nvar s = document.querySelector('script[manifest]');\n// Not in localStorage? Fetch it!\nif(!manifest){\n  var url = (s? s.getAttribute('manifest'): null) || 'manifest.json';\n  // get manifest.json, then loadManifest.\n  pegasus(url).then(loadManifest,function(xhr){\n    console.error('Could not download '+url+': '+xhr.status);\n  });\n// Manifest was in localStorage. Load it immediatly.\n} else {\n  loadManifest(manifest,true,s.getAttribute('timeout') || 10000);\n}\n})();"}